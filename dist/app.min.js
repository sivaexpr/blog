!function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",function(){if("undefined"!=typeof window){var e="webpack-livereload-plugin-script";if(!document.getElementById(e)){var t=document.createElement("script");t.id=e,t.async=!0,t.src="http://localhost:35729/livereload.js",document.getElementsByTagName("head")[0].appendChild(t)}}}(),t(t.s=10)}([function(e,t,n){var r,i;/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function a(e,t){t=t||ae;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function s(e){var t=!!e&&"length"in e&&e.length,n=ye.type(e);return"function"!==n&&!ye.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function u(e,t,n){return ye.isFunction(t)?ye.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?ye.grep(e,function(e){return e===t!==n}):"string"!=typeof t?ye.grep(e,function(e){return de.call(t,e)>-1!==n}):Ae.test(t)?ye.filter(t,e,n):(t=ye.filter(t,e),ye.grep(e,function(e){return de.call(t,e)>-1!==n&&1===e.nodeType}))}function c(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function d(e){var t={};return ye.each(e.match(Me)||[],function(e,n){t[n]=!0}),t}function f(e){return e}function p(e){throw e}function h(e,t,n,r){var i;try{e&&ye.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&ye.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function m(){ae.removeEventListener("DOMContentLoaded",m),n.removeEventListener("load",m),ye.ready()}function v(){this.expando=ye.expando+v.uid++}function g(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ie.test(e)?JSON.parse(e):e)}function y(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Be,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=g(n)}catch(e){}qe.set(e,t,n)}else n=void 0;return n}function b(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return ye.css(e,t,"")},l=s(),u=n&&n[3]||(ye.cssNumber[t]?"":"px"),c=(ye.cssNumber[t]||"px"!==u&&+l)&&We.exec(ye.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{o=o||".5",c/=o,ye.style(e,t,c+u)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function x(e){var t,n=e.ownerDocument,r=e.nodeName,i=Xe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=ye.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Xe[r]=i,i)}function w(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)r=e[o],r.style&&(n=r.style.display,t?("none"===n&&(i[o]=Re.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ue(r)&&(i[o]=x(r))):"none"!==n&&(i[o]="none",Re.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function C(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&l(e,t)?ye.merge([e],n):n}function T(e,t){for(var n=0,r=e.length;n<r;n++)Re.set(e[n],"globalEval",!t||Re.get(t[n],"globalEval"))}function S(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===ye.type(o))ye.merge(f,o.nodeType?[o]:o);else if(Ke.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(Ye.exec(o)||["",""])[1].toLowerCase(),l=Je[s]||Je._default,a.innerHTML=l[1]+ye.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;ye.merge(f,a.childNodes),a=d.firstChild,a.textContent=""}else f.push(t.createTextNode(o));for(d.textContent="",p=0;o=f[p++];)if(r&&ye.inArray(o,r)>-1)i&&i.push(o);else if(u=ye.contains(o.ownerDocument,o),a=C(d.appendChild(o),"script"),u&&T(a),n)for(c=0;o=a[c++];)Qe.test(o.type||"")&&n.push(o);return d}function k(){return!0}function E(){return!1}function N(){try{return ae.activeElement}catch(e){}}function A(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)A(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=E;else if(!i)return e;return 1===o&&(a=i,i=function(e){return ye().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=ye.guid++)),e.each(function(){ye.event.add(this,t,i,r,n)})}function j(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")?ye(">tbody",e)[0]||e:e}function D(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function L(e){var t=at.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function O(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(Re.hasData(e)&&(o=Re.access(e),a=Re.set(t,o),u=o.events)){delete a.handle,a.events={};for(i in u)for(n=0,r=u[i].length;n<r;n++)ye.event.add(t,i,u[i][n])}qe.hasData(e)&&(s=qe.access(e),l=ye.extend({},s),qe.set(t,l))}}function M(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function P(e,t,n,r){t=ue.apply([],t);var i,o,s,l,u,c,d=0,f=e.length,p=f-1,h=t[0],m=ye.isFunction(h);if(m||f>1&&"string"==typeof h&&!ge.checkClone&&ot.test(h))return e.each(function(i){var o=e.eq(i);m&&(t[0]=h.call(this,i,o.html())),P(o,t,n,r)});if(f&&(i=S(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=ye.map(C(i,"script"),D),l=s.length;d<f;d++)u=i,d!==p&&(u=ye.clone(u,!0,!0),l&&ye.merge(s,C(u,"script"))),n.call(e[d],u,d);if(l)for(c=s[s.length-1].ownerDocument,ye.map(s,L),d=0;d<l;d++)u=s[d],Qe.test(u.type||"")&&!Re.access(u,"globalEval")&&ye.contains(c,u)&&(u.src?ye._evalUrl&&ye._evalUrl(u.src):a(u.textContent.replace(st,""),c))}return e}function _(e,t,n){for(var r,i=t?ye.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||ye.cleanData(C(r)),r.parentNode&&(n&&ye.contains(r.ownerDocument,r)&&T(C(r,"script")),r.parentNode.removeChild(r));return e}function F(e,t,n){var r,i,o,a,s=e.style;return n=n||ct(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||ye.contains(e.ownerDocument,e)||(a=ye.style(e,t)),!ge.pixelMarginRight()&&ut.test(a)&&lt.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function H(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function R(e){if(e in vt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=mt.length;n--;)if((e=mt[n]+t)in vt)return e}function q(e){var t=ye.cssProps[e];return t||(t=ye.cssProps[e]=R(e)||e),t}function I(e,t,n){var r=We.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function B(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=ye.css(e,n+ze[o],!0,i)),r?("content"===n&&(a-=ye.css(e,"padding"+ze[o],!0,i)),"margin"!==n&&(a-=ye.css(e,"border"+ze[o]+"Width",!0,i))):(a+=ye.css(e,"padding"+ze[o],!0,i),"padding"!==n&&(a+=ye.css(e,"border"+ze[o]+"Width",!0,i)));return a}function $(e,t,n){var r,i=ct(e),o=F(e,t,i),a="border-box"===ye.css(e,"boxSizing",!1,i);return ut.test(o)?o:(r=a&&(ge.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+B(e,t,n||(a?"border":"content"),r,i)+"px")}function W(e,t,n,r,i){return new W.prototype.init(e,t,n,r,i)}function z(){yt&&(!1===ae.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(z):n.setTimeout(z,ye.fx.interval),ye.fx.tick())}function U(){return n.setTimeout(function(){gt=void 0}),gt=ye.now()}function V(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=ze[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function X(e,t,n){for(var r,i=(Q.tweeners[t]||[]).concat(Q.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function G(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,f=this,p={},h=e.style,m=e.nodeType&&Ue(e),v=Re.get(e,"fxshow");n.queue||(a=ye._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,ye.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],bt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;m=!0}p[r]=v&&v[r]||ye.style(e,r)}if((l=!ye.isEmptyObject(t))||!ye.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=v&&v.display,null==u&&(u=Re.get(e,"display")),c=ye.css(e,"display"),"none"===c&&(u?c=u:(w([e],!0),u=e.style.display||u,c=ye.css(e,"display"),w([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===ye.css(e,"float")&&(l||(f.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(r in p)l||(v?"hidden"in v&&(m=v.hidden):v=Re.access(e,"fxshow",{display:u}),o&&(v.hidden=!m),m&&w([e],!0),f.done(function(){m||w([e]),Re.remove(e,"fxshow");for(r in p)ye.style(e,r,p[r])})),l=X(m?v[r]:0,r,f),r in v||(v[r]=l.start,m&&(l.end=l.start,l.start=0))}}function Y(e,t){var n,r,i,o,a;for(n in e)if(r=ye.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=ye.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function Q(e,t,n){var r,i,o=0,a=Q.prefilters.length,s=ye.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=gt||U(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;a<l;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),o<1&&l?n:(l||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:ye.extend({},t),opts:ye.extend(!0,{specialEasing:{},easing:ye.easing._default},n),originalProperties:t,originalOptions:n,startTime:gt||U(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ye.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(Y(c,u.opts.specialEasing);o<a;o++)if(r=Q.prefilters[o].call(u,e,c,u.opts))return ye.isFunction(r.stop)&&(ye._queueHooks(u.elem,u.opts.queue).stop=ye.proxy(r.stop,r)),r;return ye.map(c,X,u),ye.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),ye.fx.timer(ye.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function J(e){return(e.match(Me)||[]).join(" ")}function K(e){return e.getAttribute&&e.getAttribute("class")||""}function Z(e,t,n,r){var i;if(Array.isArray(t))ye.each(t,function(t,i){n||Dt.test(e)?r(e,i):Z(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==ye.type(t))r(e,t);else for(i in t)Z(e+"["+i+"]",t[i],n,r)}function ee(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Me)||[];if(ye.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function te(e,t,n,r){function i(s){var l;return o[s]=!0,ye.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===$t;return i(t.dataTypes[0])||!o["*"]&&i("*")}function ne(e,t){var n,r,i=ye.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&ye.extend(!0,e,r),e}function re(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}function ie(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var oe=[],ae=n.document,se=Object.getPrototypeOf,le=oe.slice,ue=oe.concat,ce=oe.push,de=oe.indexOf,fe={},pe=fe.toString,he=fe.hasOwnProperty,me=he.toString,ve=me.call(Object),ge={},ye=function(e,t){return new ye.fn.init(e,t)},be=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,xe=/^-ms-/,we=/-([a-z])/g,Ce=function(e,t){return t.toUpperCase()};ye.fn=ye.prototype={jquery:"3.2.1",constructor:ye,length:0,toArray:function(){return le.call(this)},get:function(e){return null==e?le.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ye.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ye.each(this,e)},map:function(e){return this.pushStack(ye.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(le.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ce,sort:oe.sort,splice:oe.splice},ye.extend=ye.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||ye.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(u&&r&&(ye.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&ye.isPlainObject(n)?n:{},a[t]=ye.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},ye.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ye.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=ye.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==pe.call(e))&&(!(t=se(e))||"function"==typeof(n=he.call(t,"constructor")&&t.constructor)&&me.call(n)===ve)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?fe[pe.call(e)]||"object":typeof e},globalEval:function(e){a(e)},camelCase:function(e){return e.replace(xe,"ms-").replace(we,Ce)},each:function(e,t){var n,r=0;if(s(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(be,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(s(Object(e))?ye.merge(n,"string"==typeof e?[e]:e):ce.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:de.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(s(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return ue.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),ye.isFunction(e))return r=le.call(arguments,2),i=function(){return e.apply(t||this,r.concat(le.call(arguments)))},i.guid=e.guid=e.guid||ye.guid++,i},now:Date.now,support:ge}),"function"==typeof Symbol&&(ye.fn[Symbol.iterator]=oe[Symbol.iterator]),ye.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){fe["[object "+t+"]"]=t.toLowerCase()});var Te=/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){function t(e,t,n,r){var i,o,a,s,l,c,f,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:q)!==L&&D(t),t=t||L,M)){if(11!==h&&(l=me.exec(e)))if(i=l[1]){if(9===h){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(p&&(a=p.getElementById(i))&&H(t,a)&&a.id===i)return n.push(a),n}else{if(l[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!z[e+" "]&&(!P||!P.test(e))){if(1!==h)p=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=R),c=S(e),o=c.length;o--;)c[o]="#"+s+" "+d(c[o]);f=c.join(","),p=ve.test(e)&&u(t.parentNode)||t}if(f)try{return Q.apply(n,p.querySelectorAll(f)),n}catch(e){}finally{s===R&&t.removeAttribute("id")}}}return E(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[R]=!0,e}function i(e){var t=L.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=B++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,l){var u,c,d,f=[I,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=t[R]||(t[R]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===I&&u[1]===s)return f[2]=u[2];if(c[o]=f,f[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function h(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function v(e,t,n,i,o,a){return i&&!i[R]&&(i=v(i)),o&&!o[R]&&(o=v(o,a)),r(function(r,a,s,l){var u,c,d,f=[],p=[],v=a.length,g=r||h(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?g:m(g,f,e,s,l),b=n?o||(r?e:v||i)?[]:a:y;if(n&&n(y,b,s,l),i)for(u=m(b,p),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(b[p[c]]=!(y[p[c]]=d));if(r){if(o||e){if(o){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(y[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=o?K(r,d):f[c])>-1&&(r[u]=!(a[u]=d))}}else b=m(b===a?b.splice(v,b.length):b),o?o(null,a,b,l):Q.apply(a,b)})}function g(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=f(function(e){return e===t},a,!0),u=f(function(e){return K(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==N)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];s<i;s++)if(n=w.relative[e[s].type])c=[f(p(c),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[R]){for(r=++s;r<i&&!w.relative[e[r].type];r++);return v(s>1&&p(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<r&&g(e.slice(s,r)),r<i&&g(e=e.slice(r)),r<i&&d(e))}c.push(n)}return p(c)}function y(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,l,u){var c,d,f,p=0,h="0",v=r&&[],g=[],y=N,b=r||o&&w.find.TAG("*",u),x=I+=null==y?1:Math.random()||.1,C=b.length;for(u&&(N=a===L||a||u);h!==C&&null!=(c=b[h]);h++){if(o&&c){for(d=0,a||c.ownerDocument===L||(D(c),s=!M);f=e[d++];)if(f(c,a||L,s)){l.push(c);break}u&&(I=x)}i&&((c=!f&&c)&&p--,r&&v.push(c))}if(p+=h,i&&h!==p){for(d=0;f=n[d++];)f(v,g,a,s);if(r){if(p>0)for(;h--;)v[h]||g[h]||(g[h]=G.call(l));g=m(g)}Q.apply(l,g),u&&!r&&g.length>0&&p+n.length>1&&t.uniqueSort(l)}return u&&(I=x,N=y),v};return i?r(a):a}var b,x,w,C,T,S,k,E,N,A,j,D,L,O,M,P,_,F,H,R="sizzle"+1*new Date,q=e.document,I=0,B=0,$=n(),W=n(),z=n(),U=function(e,t){return e===t&&(j=!0),0},V={}.hasOwnProperty,X=[],G=X.pop,Y=X.push,Q=X.push,J=X.slice,K=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(re),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ve=/[+~]/,ge=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){D()},Ce=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Q.apply(X=J.call(q.childNodes),q.childNodes),X[q.childNodes.length].nodeType}catch(e){Q={apply:X.length?function(e,t){Y.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},T=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:q;return r!==L&&9===r.nodeType&&r.documentElement?(L=r,O=L.documentElement,M=!T(L),q!==L&&(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(L.getElementsByClassName),x.getById=i(function(e){return O.appendChild(e).id=R,!L.getElementsByName||!L.getElementsByName(R).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ge,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&M){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&M)return t.getElementsByClassName(e)},_=[],P=[],(x.qsa=he.test(L.querySelectorAll))&&(i(function(e){O.appendChild(e).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+R+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+R+"+*").length||P.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),O.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(x.matchesSelector=he.test(F=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&i(function(e){x.disconnectedMatch=F.call(e,"*"),F.call(e,"[s!='']:x"),_.push("!=",re)}),P=P.length&&new RegExp(P.join("|")),_=_.length&&new RegExp(_.join("|")),t=he.test(O.compareDocumentPosition),H=t||he.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===q&&H(q,e)?-1:t===L||t.ownerDocument===q&&H(q,t)?1:A?K(A,e)-K(A,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===L?-1:t===L?1:i?-1:o?1:A?K(A,e)-K(A,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===q?-1:l[r]===q?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&D(e),n=n.replace(le,"='$1']"),x.matchesSelector&&M&&!z[n+" "]&&(!_||!_.test(n))&&(!P||!P.test(n)))try{var r=F.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&D(e),H(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&D(e);var n=w.attrHandle[t.toLowerCase()],r=n&&V.call(w.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:x.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(j=!x.detectDuplicates,A=!x.sortStable&&e.slice(0),e.sort(U),j){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return A=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ge,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ge,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ge,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=$[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&$(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,f,p,h,m=o!==a?"nextSibling":"previousSibling",v=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(v){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?v.firstChild:v.lastChild],a&&y){for(f=v,d=f[R]||(f[R]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[e]||[],p=u[0]===I&&u[1],b=p&&u[2],f=p&&v.childNodes[p];f=++p&&f&&f[m]||(b=p=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){c[e]=[I,p,b];break}}else if(y&&(f=t,d=f[R]||(f[R]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[e]||[],p=u[0]===I&&u[1],b=p),!1===b)for(;(f=++p&&f&&f[m]||(b=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++b||(y&&(d=f[R]||(f[R]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),c[e]=[I,b]),f!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[R]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=K(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(oe,"$1"));return i[R]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ge,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ge,ye).toLowerCase(),function(t){var n;do{if(n=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,S=t.tokenize=function(e,n){var r,i,o,a,s,l,u,c=W[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=w.preFilter;s;){r&&!(i=ae.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),r=!1,(i=se.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),s=s.slice(r.length));for(a in w.filter)!(i=de[a].exec(s))||u[a]&&!(i=u[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):W(e,l).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=g(t[n]),o[R]?r.push(o):i.push(o);o=z(e,y(i,r)),o.selector=e}return o},E=t.select=function(e,t,n,r){var i,o,a,s,l,c="function"==typeof e&&e,f=!r&&S(e=c.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&M&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ge,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((l=w.find[s])&&(r=l(a.matches[0].replace(ge,ye),ve.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&d(o)))return Q.apply(n,r),n;break}}return(c||k(e,f))(r,t,!M,n,!t||ve.test(e)&&u(t.parentNode)||t),n},x.sortStable=R.split("").sort(U).join("")===R,x.detectDuplicates=!!j,D(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(L.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(n);ye.find=Te,ye.expr=Te.selectors,ye.expr[":"]=ye.expr.pseudos,ye.uniqueSort=ye.unique=Te.uniqueSort,ye.text=Te.getText,ye.isXMLDoc=Te.isXML,ye.contains=Te.contains,ye.escapeSelector=Te.escape;var Se=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&ye(e).is(n))break;r.push(e)}return r},ke=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ee=ye.expr.match.needsContext,Ne=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ae=/^.[^:#\[\.,]*$/;ye.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ye.find.matchesSelector(r,e)?[r]:[]:ye.find.matches(e,ye.grep(t,function(e){return 1===e.nodeType}))},ye.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(ye(e).filter(function(){for(t=0;t<r;t++)if(ye.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)ye.find(e,i[t],n);return r>1?ye.uniqueSort(n):n},filter:function(e){return this.pushStack(u(this,e||[],!1))},not:function(e){return this.pushStack(u(this,e||[],!0))},is:function(e){return!!u(this,"string"==typeof e&&Ee.test(e)?ye(e):e||[],!1).length}});var je,De=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ye.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||je,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:De.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ye?t[0]:t,ye.merge(this,ye.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:ae,!0)),Ne.test(r[1])&&ye.isPlainObject(t))for(r in t)ye.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=ae.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ye.isFunction(e)?void 0!==n.ready?n.ready(e):e(ye):ye.makeArray(e,this)}).prototype=ye.fn,je=ye(ae);var Le=/^(?:parents|prev(?:Until|All))/,Oe={children:!0,contents:!0,next:!0,prev:!0};ye.fn.extend({has:function(e){var t=ye(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ye.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&ye(e);if(!Ee.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ye.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ye.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?de.call(ye(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ye.uniqueSort(ye.merge(this.get(),ye(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ye.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Se(e,"parentNode")},parentsUntil:function(e,t,n){return Se(e,"parentNode",n)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return Se(e,"nextSibling")},prevAll:function(e){return Se(e,"previousSibling")},nextUntil:function(e,t,n){return Se(e,"nextSibling",n)},prevUntil:function(e,t,n){return Se(e,"previousSibling",n)},siblings:function(e){return ke((e.parentNode||{}).firstChild,e)},children:function(e){return ke(e.firstChild)},contents:function(e){return l(e,"iframe")?e.contentDocument:(l(e,"template")&&(e=e.content||e),ye.merge([],e.childNodes))}},function(e,t){ye.fn[e]=function(n,r){var i=ye.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ye.filter(r,i)),this.length>1&&(Oe[e]||ye.uniqueSort(i),Le.test(e)&&i.reverse()),this.pushStack(i)}});var Me=/[^\x20\t\r\n\f]+/g;ye.Callbacks=function(e){e="string"==typeof e?d(e):ye.extend({},e);var t,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){ye.each(n,function(n,r){ye.isFunction(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==ye.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return ye.each(arguments,function(e,t){for(var n;(n=ye.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?ye.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},ye.extend({Deferred:function(e){var t=[["notify","progress",ye.Callbacks("memory"),ye.Callbacks("memory"),2],["resolve","done",ye.Callbacks("once memory"),ye.Callbacks("once memory"),0,"resolved"],["reject","fail",ye.Callbacks("once memory"),ye.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return ye.Deferred(function(n){ye.each(t,function(t,r){var i=ye.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&ye.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){function o(e,t,r,i){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<a)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,ye.isFunction(u)?i?u.call(n,o(a,t,f,i),o(a,t,p,i)):(a++,u.call(n,o(a,t,f,i),o(a,t,p,i),o(a,t,f,t.notifyWith))):(r!==f&&(s=void 0,l=[n]),(i||t.resolveWith)(s,l))}},c=i?u:function(){try{u()}catch(n){ye.Deferred.exceptionHook&&ye.Deferred.exceptionHook(n,c.stackTrace),e+1>=a&&(r!==p&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?c():(ye.Deferred.getStackHook&&(c.stackTrace=ye.Deferred.getStackHook()),n.setTimeout(c))}}var a=0;return ye.Deferred(function(n){t[0][3].add(o(0,n,ye.isFunction(i)?i:f,n.notifyWith)),t[1][3].add(o(0,n,ye.isFunction(e)?e:f)),t[2][3].add(o(0,n,ye.isFunction(r)?r:p))}).promise()},promise:function(e){return null!=e?ye.extend(e,i):i}},o={};return ye.each(t,function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},t[3-e][2].disable,t[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=le.call(arguments),o=ye.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?le.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(h(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||ye.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)h(i[n],a(n),o.reject);return o.promise()}});var Pe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ye.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&Pe.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},ye.readyException=function(e){n.setTimeout(function(){throw e})};var _e=ye.Deferred();ye.fn.ready=function(e){return _e.then(e).catch(function(e){ye.readyException(e)}),this},ye.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ye.readyWait:ye.isReady)||(ye.isReady=!0,!0!==e&&--ye.readyWait>0||_e.resolveWith(ae,[ye]))}}),ye.ready.then=_e.then,"complete"===ae.readyState||"loading"!==ae.readyState&&!ae.documentElement.doScroll?n.setTimeout(ye.ready):(ae.addEventListener("DOMContentLoaded",m),n.addEventListener("load",m));var Fe=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===ye.type(n)){i=!0;for(s in n)Fe(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,ye.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(ye(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},He=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};v.uid=1,v.prototype={cache:function(e){var t=e[this.expando];return t||(t={},He(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[ye.camelCase(t)]=n;else for(r in t)i[ye.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ye.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){Array.isArray(t)?t=t.map(ye.camelCase):(t=ye.camelCase(t),t=t in r?[t]:t.match(Me)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||ye.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ye.isEmptyObject(t)}};var Re=new v,qe=new v,Ie=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Be=/[A-Z]/g;ye.extend({hasData:function(e){return qe.hasData(e)||Re.hasData(e)},data:function(e,t,n){return qe.access(e,t,n)},removeData:function(e,t){qe.remove(e,t)},_data:function(e,t,n){return Re.access(e,t,n)},_removeData:function(e,t){Re.remove(e,t)}}),ye.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=qe.get(o),1===o.nodeType&&!Re.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=ye.camelCase(r.slice(5)),y(o,r,i[r])));Re.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){qe.set(this,e)}):Fe(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=qe.get(o,e)))return n;if(void 0!==(n=y(o,e)))return n}else this.each(function(){qe.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){qe.remove(this,e)})}}),ye.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Re.get(e,t),n&&(!r||Array.isArray(n)?r=Re.access(e,t,ye.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ye.queue(e,t),r=n.length,i=n.shift(),o=ye._queueHooks(e,t),a=function(){ye.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Re.get(e,n)||Re.access(e,n,{empty:ye.Callbacks("once memory").add(function(){Re.remove(e,[t+"queue",n])})})}}),ye.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ye.queue(this[0],e):void 0===t?this:this.each(function(){var n=ye.queue(this,e,t);ye._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ye.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ye.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ye.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Re.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var $e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,We=new RegExp("^(?:([+-])=|)("+$e+")([a-z%]*)$","i"),ze=["Top","Right","Bottom","Left"],Ue=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&ye.contains(e.ownerDocument,e)&&"none"===ye.css(e,"display")},Ve=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Xe={};ye.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ue(this)?ye(this).show():ye(this).hide()})}});var Ge=/^(?:checkbox|radio)$/i,Ye=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Qe=/^$|\/(?:java|ecma)script/i,Je={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Je.optgroup=Je.option,Je.tbody=Je.tfoot=Je.colgroup=Je.caption=Je.thead,Je.th=Je.td;var Ke=/<|&#?\w+;/;!function(){var e=ae.createDocumentFragment(),t=e.appendChild(ae.createElement("div")),n=ae.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),ge.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ge.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ze=ae.documentElement,et=/^key/,tt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,nt=/^([^.]*)(?:\.(.+)|)/;ye.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,d,f,p,h,m,v=Re.get(e);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&ye.find.matchesSelector(Ze,i),n.guid||(n.guid=ye.guid++),(l=v.events)||(l=v.events={}),(a=v.handle)||(a=v.handle=function(t){return void 0!==ye&&ye.event.triggered!==t.type?ye.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Me)||[""],u=t.length;u--;)s=nt.exec(t[u])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p&&(d=ye.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,d=ye.event.special[p]||{},c=ye.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ye.expr.match.needsContext.test(i),namespace:h.join(".")},o),(f=l[p])||(f=l[p]=[],f.delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),ye.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,f,p,h,m,v=Re.hasData(e)&&Re.get(e);if(v&&(l=v.events)){for(t=(t||"").match(Me)||[""],u=t.length;u--;)if(s=nt.exec(t[u])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(d=ye.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,f=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||ye.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)ye.event.remove(e,p+t[u],n,r,!0);ye.isEmptyObject(l)&&Re.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=ye.event.fix(e),l=new Array(arguments.length),u=(Re.get(this,"events")||{})[s.type]||[],c=ye.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=ye.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((ye.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)r=t[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?ye(i,this).index(u)>-1:ye.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(ye.Event.prototype,e,{enumerable:!0,configurable:!0,get:ye.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ye.expando]?e:new ye.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==N()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===N()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&l(this,"input"))return this.click(),!1},_default:function(e){return l(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ye.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ye.Event=function(e,t){if(!(this instanceof ye.Event))return new ye.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?k:E,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ye.extend(this,t),this.timeStamp=e&&e.timeStamp||ye.now(),this[ye.expando]=!0},ye.Event.prototype={constructor:ye.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=k,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=k,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=k,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ye.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&et.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&tt.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ye.event.addProp),ye.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ye.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||ye.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ye.fn.extend({on:function(e,t,n,r){return A(this,e,t,n,r)},one:function(e,t,n,r){return A(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ye(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=E),this.each(function(){ye.event.remove(this,e,n,t)})}});var rt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,it=/<script|<style|<link/i,ot=/checked\s*(?:[^=]|=\s*.checked.)/i,at=/^true\/(.*)/,st=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ye.extend({htmlPrefilter:function(e){return e.replace(rt,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=ye.contains(e.ownerDocument,e);if(!(ge.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ye.isXMLDoc(e)))for(a=C(s),o=C(e),r=0,i=o.length;r<i;r++)M(o[r],a[r]);if(t)if(n)for(o=o||C(e),a=a||C(s),r=0,i=o.length;r<i;r++)O(o[r],a[r]);else O(e,s);return a=C(s,"script"),a.length>0&&T(a,!l&&C(e,"script")),s},cleanData:function(e){for(var t,n,r,i=ye.event.special,o=0;void 0!==(n=e[o]);o++)if(He(n)){if(t=n[Re.expando]){if(t.events)for(r in t.events)i[r]?ye.event.remove(n,r):ye.removeEvent(n,r,t.handle);n[Re.expando]=void 0}n[qe.expando]&&(n[qe.expando]=void 0)}}}),ye.fn.extend({detach:function(e){return _(this,e,!0)},remove:function(e){return _(this,e)},text:function(e){return Fe(this,function(e){return void 0===e?ye.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){j(this,e).appendChild(e)}})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=j(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ye.cleanData(C(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ye.clone(this,e,t)})},html:function(e){return Fe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!it.test(e)&&!Je[(Ye.exec(e)||["",""])[1].toLowerCase()]){e=ye.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(ye.cleanData(C(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var n=this.parentNode;ye.inArray(this,e)<0&&(ye.cleanData(C(this)),n&&n.replaceChild(t,this))},e)}}),ye.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ye.fn[e]=function(e){for(var n,r=[],i=ye(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),ye(i[a])[t](n),ce.apply(r,n.get());return this.pushStack(r)}});var lt=/^margin/,ut=new RegExp("^("+$e+")(?!px)[a-z%]+$","i"),ct=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)};!function(){function e(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ze.appendChild(a);var e=n.getComputedStyle(s);t="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,Ze.removeChild(a),s=null}}var t,r,i,o,a=ae.createElement("div"),s=ae.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",ge.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),ye.extend(ge,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),i},reliableMarginLeft:function(){return e(),o}}))}();var dt=/^(none|table(?!-c[ea]).+)/,ft=/^--/,pt={position:"absolute",visibility:"hidden",display:"block"},ht={letterSpacing:"0",fontWeight:"400"},mt=["Webkit","Moz","ms"],vt=ae.createElement("div").style;ye.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=F(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=ye.camelCase(t),l=ft.test(t),u=e.style;if(l||(t=q(s)),a=ye.cssHooks[t]||ye.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];o=typeof n,"string"===o&&(i=We.exec(n))&&i[1]&&(n=b(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(ye.cssNumber[s]?"":"px")),ge.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=ye.camelCase(t);return ft.test(t)||(t=q(s)),a=ye.cssHooks[t]||ye.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=F(e,t,r)),"normal"===i&&t in ht&&(i=ht[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),ye.each(["height","width"],function(e,t){ye.cssHooks[t]={get:function(e,n,r){if(n)return!dt.test(ye.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,t,r):Ve(e,pt,function(){return $(e,t,r)})},set:function(e,n,r){var i,o=r&&ct(e),a=r&&B(e,t,r,"border-box"===ye.css(e,"boxSizing",!1,o),o);return a&&(i=We.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=ye.css(e,t)),I(e,n,a)}}}),ye.cssHooks.marginLeft=H(ge.reliableMarginLeft,function(e,t){if(t)return(parseFloat(F(e,"marginLeft"))||e.getBoundingClientRect().left-Ve(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ye.each({margin:"",padding:"",border:"Width"},function(e,t){ye.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ze[r]+t]=o[r]||o[r-2]||o[0];return i}},lt.test(e)||(ye.cssHooks[e+t].set=I)}),ye.fn.extend({css:function(e,t){return Fe(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=ct(e),i=t.length;a<i;a++)o[t[a]]=ye.css(e,t[a],!1,r);return o}return void 0!==n?ye.style(e,t,n):ye.css(e,t)},e,t,arguments.length>1)}}),ye.Tween=W,W.prototype={constructor:W,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||ye.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ye.cssNumber[n]?"":"px")},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t,n=W.propHooks[this.prop];return this.options.duration?this.pos=t=ye.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ye.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){ye.fx.step[e.prop]?ye.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[ye.cssProps[e.prop]]&&!ye.cssHooks[e.prop]?e.elem[e.prop]=e.now:ye.style(e.elem,e.prop,e.now+e.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ye.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ye.fx=W.prototype.init,ye.fx.step={};var gt,yt,bt=/^(?:toggle|show|hide)$/,xt=/queueHooks$/;ye.Animation=ye.extend(Q,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return b(n.elem,e,We.exec(t),n),n}]},tweener:function(e,t){ye.isFunction(e)?(t=e,e=["*"]):e=e.match(Me);for(var n,r=0,i=e.length;r<i;r++)n=e[r],Q.tweeners[n]=Q.tweeners[n]||[],Q.tweeners[n].unshift(t)},prefilters:[G],prefilter:function(e,t){t?Q.prefilters.unshift(e):Q.prefilters.push(e)}}),ye.speed=function(e,t,n){var r=e&&"object"==typeof e?ye.extend({},e):{complete:n||!n&&t||ye.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ye.isFunction(t)&&t};return ye.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in ye.fx.speeds?r.duration=ye.fx.speeds[r.duration]:r.duration=ye.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){ye.isFunction(r.old)&&r.old.call(this),r.queue&&ye.dequeue(this,r.queue)},r},ye.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ye.isEmptyObject(e),o=ye.speed(t,n,r),a=function(){var t=Q(this,ye.extend({},e),o);(i||Re.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ye.timers,a=Re.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&xt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||ye.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Re.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ye.timers,a=r?r.length:0;for(n.finish=!0,ye.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ye.each(["toggle","show","hide"],function(e,t){var n=ye.fn[t];ye.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(V(t,!0),e,r,i)}}),ye.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ye.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ye.timers=[],ye.fx.tick=function(){var e,t=0,n=ye.timers;for(gt=ye.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ye.fx.stop(),gt=void 0},ye.fx.timer=function(e){ye.timers.push(e),ye.fx.start()},ye.fx.interval=13,ye.fx.start=function(){yt||(yt=!0,z())},ye.fx.stop=function(){yt=null},ye.fx.speeds={slow:600,fast:200,_default:400},ye.fn.delay=function(e,t){return e=ye.fx?ye.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=ae.createElement("input"),t=ae.createElement("select"),n=t.appendChild(ae.createElement("option"));e.type="checkbox",ge.checkOn=""!==e.value,ge.optSelected=n.selected,e=ae.createElement("input"),e.value="t",e.type="radio",ge.radioValue="t"===e.value}();var wt,Ct=ye.expr.attrHandle;ye.fn.extend({attr:function(e,t){return Fe(this,ye.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ye.removeAttr(this,e)})}}),ye.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?ye.prop(e,t,n):(1===o&&ye.isXMLDoc(e)||(i=ye.attrHooks[t.toLowerCase()]||(ye.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void ye.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=ye.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!ge.radioValue&&"radio"===t&&l(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Me);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?ye.removeAttr(e,n):e.setAttribute(n,n),n}},ye.each(ye.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Ct[t]||ye.find.attr;Ct[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=Ct[a],Ct[a]=i,i=null!=n(e,t,r)?a:null,Ct[a]=o),i}});var Tt=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;ye.fn.extend({prop:function(e,t){return Fe(this,ye.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ye.propFix[e]||e]})}}),ye.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ye.isXMLDoc(e)||(t=ye.propFix[t]||t,i=ye.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ye.find.attr(e,"tabindex");return t?parseInt(t,10):Tt.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ge.optSelected||(ye.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ye.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ye.propFix[this.toLowerCase()]=this}),ye.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(ye.isFunction(e))return this.each(function(t){ye(this).addClass(e.call(this,t,K(this)))});if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(i=K(n),r=1===n.nodeType&&" "+J(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=J(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(ye.isFunction(e))return this.each(function(t){ye(this).removeClass(e.call(this,t,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Me)||[];n=this[l++];)if(i=K(n),r=1===n.nodeType&&" "+J(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=J(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ye.isFunction(e)?this.each(function(n){ye(this).toggleClass(e.call(this,n,K(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=ye(this),o=e.match(Me)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=K(this),t&&Re.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Re.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+J(K(n))+" ").indexOf(t)>-1)return!0;return!1}});var kt=/\r/g;ye.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=ye.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ye(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=ye.map(i,function(e){return null==e?"":e+""})),(t=ye.valHooks[this.type]||ye.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=ye.valHooks[i.type]||ye.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(kt,""):null==n?"":n)}}}),ye.extend({valHooks:{option:{get:function(e){var t=ye.find.attr(e,"value");return null!=t?t:J(ye.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!l(n.parentNode,"optgroup"))){if(t=ye(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=ye.makeArray(t),a=i.length;a--;)r=i[a],(r.selected=ye.inArray(ye.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),ye.each(["radio","checkbox"],function(){ye.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ye.inArray(ye(e).val(),t)>-1}},ge.checkOn||(ye.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Et=/^(?:focusinfocus|focusoutblur)$/;ye.extend(ye.event,{trigger:function(e,t,r,i){var o,a,s,l,u,c,d,f=[r||ae],p=he.call(e,"type")?e.type:e,h=he.call(e,"namespace")?e.namespace.split("."):[];if(a=s=r=r||ae,3!==r.nodeType&&8!==r.nodeType&&!Et.test(p+ye.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),u=p.indexOf(":")<0&&"on"+p,e=e[ye.expando]?e:new ye.Event(p,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:ye.makeArray(t,[e]),d=ye.event.special[p]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!ye.isWindow(r)){for(l=d.delegateType||p,Et.test(l+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(r.ownerDocument||ae)&&f.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=f[o++])&&!e.isPropagationStopped();)e.type=o>1?l:d.bindType||p,c=(Re.get(a,"events")||{})[e.type]&&Re.get(a,"handle"),c&&c.apply(a,t),(c=u&&a[u])&&c.apply&&He(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),t)||!He(r)||u&&ye.isFunction(r[p])&&!ye.isWindow(r)&&(s=r[u],s&&(r[u]=null),ye.event.triggered=p,r[p](),ye.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(e,t,n){var r=ye.extend(new ye.Event,n,{type:e,isSimulated:!0});ye.event.trigger(r,null,t)}}),ye.fn.extend({trigger:function(e,t){return this.each(function(){ye.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ye.event.trigger(e,t,n,!0)}}),ye.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ye.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ye.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ge.focusin="onfocusin"in n,ge.focusin||ye.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ye.event.simulate(t,e.target,ye.event.fix(e))};ye.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Re.access(r,t);i||r.addEventListener(e,n,!0),Re.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Re.access(r,t)-1;i?Re.access(r,t,i):(r.removeEventListener(e,n,!0),Re.remove(r,t))}}});var Nt=n.location,At=ye.now(),jt=/\?/;ye.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||ye.error("Invalid XML: "+e),t};var Dt=/\[\]$/,Lt=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;ye.param=function(e,t){var n,r=[],i=function(e,t){var n=ye.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!ye.isPlainObject(e))ye.each(e,function(){i(this.name,this.value)});else for(n in e)Z(n,e[n],t,i);return r.join("&")},ye.fn.extend({serialize:function(){return ye.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ye.prop(this,"elements");return e?ye.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ye(this).is(":disabled")&&Mt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!Ge.test(e))}).map(function(e,t){var n=ye(this).val();return null==n?null:Array.isArray(n)?ye.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var Pt=/%20/g,_t=/#.*$/,Ft=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qt=/^(?:GET|HEAD)$/,It=/^\/\//,Bt={},$t={},Wt="*/".concat("*"),zt=ae.createElement("a");zt.href=Nt.href,ye.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Nt.href,type:"GET",isLocal:Rt.test(Nt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ye.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ne(ne(e,ye.ajaxSettings),t):ne(ye.ajaxSettings,e)},ajaxPrefilter:ee(Bt),ajaxTransport:ee($t),ajax:function(e,t){function r(e,t,r,s){var u,f,p,x,w,C=t;c||(c=!0,l&&n.clearTimeout(l),i=void 0,a=s||"",T.readyState=e>0?4:0,u=e>=200&&e<300||304===e,r&&(x=re(h,T,r)),x=ie(h,x,T,u),u?(h.ifModified&&(w=T.getResponseHeader("Last-Modified"),w&&(ye.lastModified[o]=w),(w=T.getResponseHeader("etag"))&&(ye.etag[o]=w)),204===e||"HEAD"===h.type?C="nocontent":304===e?C="notmodified":(C=x.state,f=x.data,p=x.error,u=!p)):(p=C,!e&&C||(C="error",e<0&&(e=0))),T.status=e,T.statusText=(t||C)+"",u?g.resolveWith(m,[f,C,T]):g.rejectWith(m,[T,C,p]),T.statusCode(b),b=void 0,d&&v.trigger(u?"ajaxSuccess":"ajaxError",[T,h,u?f:p]),y.fireWith(m,[T,C]),d&&(v.trigger("ajaxComplete",[T,h]),--ye.active||ye.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,o,a,s,l,u,c,d,f,p,h=ye.ajaxSetup({},t),m=h.context||h,v=h.context&&(m.nodeType||m.jquery)?ye(m):ye.event,g=ye.Deferred(),y=ye.Callbacks("once memory"),b=h.statusCode||{},x={},w={},C="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Ht.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),r(0,t),this}};if(g.promise(T),h.url=((e||h.url||Nt.href)+"").replace(It,Nt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Me)||[""],null==h.crossDomain){u=ae.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ye.param(h.data,h.traditional)),te(Bt,h,t,T),c)return T;d=ye.event&&h.global,d&&0==ye.active++&&ye.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!qt.test(h.type),o=h.url.replace(_t,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(p=h.url.slice(o.length),h.data&&(o+=(jt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ft,"$1"),p=(jt.test(o)?"&":"?")+"_="+At+++p),h.url=o+p),h.ifModified&&(ye.lastModified[o]&&T.setRequestHeader("If-Modified-Since",ye.lastModified[o]),ye.etag[o]&&T.setRequestHeader("If-None-Match",ye.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Wt+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)T.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(m,T,h)||c))return T.abort();if(C="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),i=te($t,h,t,T)){if(T.readyState=1,d&&v.trigger("ajaxSend",[T,h]),c)return T;h.async&&h.timeout>0&&(l=n.setTimeout(function(){T.abort("timeout")},h.timeout));try{c=!1,i.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return T},getJSON:function(e,t,n){return ye.get(e,t,n,"json")},getScript:function(e,t){return ye.get(e,void 0,t,"script")}}),ye.each(["get","post"],function(e,t){ye[t]=function(e,n,r,i){return ye.isFunction(n)&&(i=i||r,r=n,n=void 0),ye.ajax(ye.extend({url:e,type:t,dataType:i,data:n,success:r},ye.isPlainObject(e)&&e))}}),ye._evalUrl=function(e){return ye.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ye.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye.isFunction(e)&&(e=e.call(this[0])),t=ye(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ye.isFunction(e)?this.each(function(t){ye(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ye(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ye.isFunction(e);return this.each(function(n){ye(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ye(this).replaceWith(this.childNodes)}),this}}),ye.expr.pseudos.hidden=function(e){return!ye.expr.pseudos.visible(e)},ye.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ye.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Vt=ye.ajaxSettings.xhr();ge.cors=!!Vt&&"withCredentials"in Vt,ge.ajax=Vt=!!Vt,ye.ajaxTransport(function(e){var t,r;if(ge.cors||Vt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),ye.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ye.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ye.globalEval(e),e}}}),ye.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ye.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=ye("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),ae.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Xt=[],Gt=/(=)\?(?=&|$)|\?\?/;ye.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||ye.expando+"_"+At++;return this[e]=!0,e}}),ye.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=ye.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(jt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||ye.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?ye(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(i)),a&&ye.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),ge.createHTMLDocument=function(){var e=ae.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),ye.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(ge.createHTMLDocument?(t=ae.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=ae.location.href,t.head.appendChild(r)):t=ae),i=Ne.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=S([e],t,o),o&&o.length&&ye(o).remove(),ye.merge([],i.childNodes))},ye.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=J(e.slice(s)),e=e.slice(0,s)),ye.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&ye.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?ye("<div>").append(ye.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},ye.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ye.fn[t]=function(e){return this.on(t,e)}}),ye.expr.pseudos.animated=function(e){return ye.grep(ye.timers,function(t){return e===t.elem}).length},ye.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u,c=ye.css(e,"position"),d=ye(e),f={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=ye.css(e,"top"),l=ye.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=d.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),ye.isFunction(t)&&(t=t.call(e,n,ye.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):d.css(f)}},ye.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ye.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===ye.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),l(e[0],"html")||(r=e.offset()),r={top:r.top+ye.css(e[0],"borderTopWidth",!0),left:r.left+ye.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-ye.css(n,"marginTop",!0),left:t.left-r.left-ye.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ye.css(e,"position");)e=e.offsetParent;return e||Ze})}}),ye.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ye.fn[e]=function(r){return Fe(this,function(e,r,i){var o;if(ye.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),ye.each(["top","left"],function(e,t){ye.cssHooks[t]=H(ge.pixelPosition,function(e,n){if(n)return n=F(e,t),ut.test(n)?ye(e).position()[t]+"px":n})}),ye.each({Height:"height",Width:"width"},function(e,t){ye.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ye.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Fe(this,function(t,n,i){var o;return ye.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?ye.css(t,n,s):ye.style(t,n,i,s)},t,a?i:void 0,a)}})}),ye.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),ye.holdReady=function(e){e?ye.readyWait++:ye.ready(!0)},ye.isArray=Array.isArray,ye.parseJSON=JSON.parse,ye.nodeName=l,r=[],void 0!==(i=function(){return ye}.apply(t,r))&&(e.exports=i);var Yt=n.jQuery,Qt=n.$;return ye.noConflict=function(e){return n.$===ye&&(n.$=Qt),e&&n.jQuery===ye&&(n.jQuery=Yt),ye},o||(n.jQuery=n.$=ye),ye})},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=r(i),a=n(2),s=r(a),l=n(3),u=r(l),c=n(8),d=r(c),f=n(7),p=r(f),h=n(4),m=r(h),v=n(9),g=r(v),y=n(5),b=r(y),x={};x.registerEvents=function(){(0,o.default)(document).on("click","header",function(e){d.default.handleHeader(e)}),(0,o.default)(document).on("click","footer",function(e){d.default.handleHeader(e),p.default.handleFooter(e)}),(0,o.default)(document).on("mouseover mouseleave","nav",function(e){u.default.handleNavEvents(e)}),(0,o.default)(document).on("click","nav",function(e){e.preventDefault(),x.commonEvents(e)}),(0,o.default)(document).on("click","#overlay",function(e){g.default.handleOverlayEvents(e)}),(0,o.default)(document).on("click","section",function(e){e.preventDefault(),x.commonEvents(e)}),(0,o.default)(document).on("click","aside",function(e){e.preventDefault(),x.commonEvents(e)}),(0,o.default)(document).on("click",".pageimage img",function(e){b.default.showImage((0,o.default)(e.target).attr("src"))}),(0,o.default)(document).on("click",".baritem",function(e){s.default.showbookmarkContents((0,o.default)(e.target).attr("id"))}),(0,o.default)(document).on("mouseover",".baritem",function(e){s.default.showbookmarkContents((0,o.default)(e.target).attr("id"))}),(0,o.default)(document).on("mouseleave",".baritem",function(e){s.default.hidebookmarkContents()}),(0,o.default)(document).on("mouseover","#index .barcontents",function(e){s.default.showbookmarkContents("index")}),(0,o.default)(document).on("mouseover","#like .barcontents",function(e){s.default.showbookmarkContents("like")}),(0,o.default)(document).on("mouseleave",".barcontents",function(e){s.default.hidebookmarkContents()}),(0,o.default)(document).on("click","#comment",function(e){x.commonEvents(e)}),(0,o.default)(document).on("click","#commentsubmit",function(e){e.preventDefault(),x.handleComments(e)})},x.commonEvents=function(e,t){var n=x.isAnchorEvent((0,o.default)(e.target));null==t&&(t={path:n,place:"inside",tag:"section"}),null!=n&&(null!=(0,o.default)(e.target).attr("target")?window.open(n,(0,o.default)(e.target).attr("target")):0!=n.indexOf("#")?x.isOVerlayEvent((0,o.default)(e.target))?b.default.show(n,(0,o.default)(e.target).attr("title")):x.handleAnchorEvents(n,t):"#comments"==n&&(window.location=n))},x.handleAnchorEvents=function(e,t){s.default.showStatusBar(),s.default.addStatusBarWidth("25%"),m.default.getContents(t,s.default)},x.isAnchorEvent=function(e){if(e.is("a")||null!=e.attr("href"))return e.attr("href")},x.isOVerlayEvent=function(e){return e.hasClass("overlay")},t.default=x},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=r(i),a=n(4),s=r(a),l=n(12),u=r(l),c=n(3),d=r(c),f=n(11),p=r(f),h={HEADER:{path:"/html/header.html",place:"first",id:"#main-container"},FOOTER:{path:"/html/footer.html",place:"last",id:"#main-container"},NAVIGATION:{path:"/html/nav.html",place:"after",tag:"header"},HEADER_FOOTER:{path:"/html/header_footer.php",place:"first",id:"#main-container"},COMMON:{place:"after",id:"#main-container"},ASIDE:{place:"last",tag:"aside"}};h.addHeader=function(e){var t=(0,o.default)(e).filter("#header").html();h.addContents(h.HEADER,t)},h.addFooter=function(e){var t=(0,o.default)(e).filter("#footer").html();h.addContents(h.FOOTER,t)},h.addNav=function(e){var t=(0,o.default)(e).filter("#nav").html();h.addContents(h.NAVIGATION,t)},h.showBase=function(e,t){h.addHeader(e),h.addNav(e),h.addFooter(e),h.addCommon(e),h.showbookmarkbar()},h.addCommon=function(e){var t=(0,o.default)(e).filter("#common").html();h.addContents(h.COMMON,t)},h.header_footer=null,h.loadContents=function(e,t){if(t){h.header_footer=e,h.showBase(e);var n=h.getBaseAsideData();h.addContents(h.ASIDE,n),h.addCommentSection(),p.default.showAds(),window.history.pushState((0,o.default)("body").html(),"",window.location.href)}},h.contentCallback=function(e,t){if(h.addStatusBarWidth("50%"),-1!=t.path.indexOf("header_footer")){h.header_footer=e,h.showBase(e,t);var n=h.getBaseAsideData();h.addContents(h.ASIDE,n),h.addCommentSection(),h.formatePageCounter(),p.default.showAds(),window.history.pushState((0,o.default)("body").html(),"",window.location.href)}else".overlay-contents-wrapper"!=t.id&&-1==t.path.indexOf("/search")&&window.history.pushState(e,"",t.path),h.addContents(t,e);h.addStatusBarWidth("100%"),h.hideStatusBar()},h.addContents=function(e,t){var n=e.tag,r=e.place;null==n&&(n=e.id),"first"==r?(0,o.default)(n).prepend(t):"last"==r?(0,o.default)(n).append(t):"after"==r?(0,o.default)(n).after(t):".overlay-contents-wrapper"==n?(0,o.default)(n).html(t):((0,o.default)(n).html((0,o.default)((0,o.default)(t).filter("#main-container").html()).filter("section").html()),h.hidebookmarkbar(),h.updateTitle(t),h.addCommentSection(),u.default.prettyPrint(),(0,o.default)("aside").fadeIn(),(0,o.default)("#search-results").fadeOut(),h.showbookmarkbar(),h.updateaside(t),d.default.hideNavMenu(),p.default.showAds()),h.addStatusBarWidth("75%")},h.updateTitle=function(e){document.title=(0,o.default)(e).filter("title").html()},h.showbookmarkbar=function(){var e='<div class="leftbar">',t=!1,n=(0,o.default)("#leftbar-contents").html();void 0!==n&&(e=e+'<div class="baritem" id="index" title="Index">'+n+"</div>",t=!0),(0,o.default)("#comments").html()&&(e+='<a href="#comments"  class="baritem" id="comment" title="Comment"></a>',t=!0),"undefined"!=typeof fbid&&0!=fbid&&(e=e+'<div class="baritem" id="like" title="Like"><div class="barcontents" id="likecontents"><ul><li><div class="fb-like" data-href="'+s.default.getURL()+'" data-layout="button_count" data-action="like" data-show-faces="false" data-share="true"></div></li></ul></div>',t=!0),e+="</div>",t&&((0,o.default)("nav").after(e),(0,o.default)("nav").after("<script>try{FB.XFBML.parse();}catch(ex){}<\/script>"))},h.hidebookmarkbar=function(){(0,o.default)(".leftbar").remove()},h.showbookmarkContents=function(e){(0,o.default)("#"+e+" .barcontents").fadeIn("slow")},h.hidebookmarkContents=function(e){(0,o.default)(".barcontents").fadeOut()},h.updateaside=function(e){var t=(0,o.default)((0,o.default)(e).filter("#main-container").html()).filter("aside").html();null!=t&&(0,o.default)("aside").html(t),null!=(t=h.getBaseAsideData())&&h.addContents(h.ASIDE,t)},h.updatePageCounter=function(){"undefined"!=typeof postid&&0!=postid?o.default.get("/pagecounter.php?pageid="+postid,function(e){(0,o.default)("#pagecounter").fadeIn(),(0,o.default)("#pagecounter span").html(e),h.formatePageCounter()}):(0,o.default)("#pagecounter").fadeOut()},h.search=function(){(0,o.default)("#sterm").val().trim().length>0?(google.search.cse.element.getElement("searchresults-only0").execute((0,o.default)("#sterm").val()),(0,o.default)("section").html(""),(0,o.default)("aside").fadeOut(),(0,o.default)("#search-results").fadeIn(),h.hidebookmarkbar()):alert("Please enter search term")},h.loadCSS=function(e){var t=(0,o.default)("<link rel='stylesheet' type='text/css' href='"+e+"'>");(0,o.default)("head").append(t)},h.getBaseAsideData=function(){return(0,o.default)(h.header_footer).filter("#aside").html()},h.getCommentSection=function(){return(0,o.default)(h.header_footer).filter("#comments").html()},h.addCommentSection=function(){void 0!==(0,o.default)("#comments").html()&&((0,o.default)("section").append(h.getCommentSection()),h.showComments())},h.formatePageCounter=function(){(0,o.default)("#pagecounter span").html(s.default.pad((0,o.default)("#pagecounter span").html(),4))},h.feedbackMessage=function(){(0,o.default)("section").prepend('<div id="fmsg"><span class="blinkmsg redtxt"><b>Attention</b></span> - We spent enough time to prepare this article. Please spend a minute of your time to give your valuable feedback in <a href="#comments">comment</a> section or click on Like button if you like us.</div>')},h.showComments=function(){(0,o.default)(".fb-comments").attr("data-href",window.location.href)},h.showStatusBar=function(){(0,o.default)("body").prepend('<div id="statusbar"></div>')},h.hideStatusBar=function(){(0,o.default)("#statusbar").remove()},h.addStatusBarWidth=function(e){},t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o={};o.handleNavEvents=function(e){(0,i.default)("#menu li").mouseover(function(){var e=(0,i.default)(this).attr("id");if(null!=e){o.showNavMenu();var t=o.getHTMLData("#"+e+"-menu-left");if(null!=t){(0,i.default)("#sub-menu").fadeIn(),o.addHTMLData("#sub-menu",t);var n=o.getHTMLData("#"+e+"-menu .defaultdata");null!=n&&o.addHTMLData("#item-menu",n)}else(0,i.default)("#sub-menu").fadeOut(),o.addHTMLData("#item-menu",o.getHTMLData("#"+e+"-menu"))}else o.hideNavMenu()}),(0,i.default)("nav").mouseleave(function(){o.hideNavMenu()}),(0,i.default)("#nav-submenu").mouseleave(function(){o.hideNavMenu()}),(0,i.default)("#sub-menu").on("mouseover","ul li",function(){var e="",t=(0,i.default)(this).attr("id");if(null!=t){var e=o.getHTMLData("#"+t+"-menu");null==e&&(e="")}o.addHTMLData("#item-menu",e)})},o.showNavMenu=function(){(0,i.default)("#nav-submenu").slideDown("slow")},o.hideNavMenu=function(){(0,i.default)("#nav-submenu").slideUp("fast")},o.addHTMLData=function(e,t){null!=t&&(0,i.default)(e).html(t)},o.getHTMLData=function(e){return(0,i.default)(e).html()},t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o={};o.getContents=function(e,t){i.default.get(e.path,function(n){t.contentCallback(n,e)})},o.pad=function(e,t,n){return n=n||"0",e+="",e.length>=t?e:new Array(t-e.length+1).join(n)+e},o.getURL=function(){var e=window.location.href;return-1!=e.indexOf("#")?e=e.substring(0,e.indexOf("#")):-1!=e.indexOf("?")&&(e=e.substring(0,e.indexOf("?"))),e},t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o={};o.show=function(e,t){var n='<div id="overlay">\t<div class="layer">\t</div>\t<div id="overlay-close">X\t</div>\t<div id="overlay-contents" class="overlay-form">       <div class="overlay-title barcolor"><h1>'+t+'</h1></div>       <div class="overlay-contents-wrapper">       </div>\t </div></div>';(0,i.default)("body").append(n);var r={path:e,place:"inside",id:".overlay-contents-wrapper"};"future.html"==e?o.contentCallback(o.getFutureArticleMessage(),r):-1!=e.indexOf("contact.html")?o.contentCallback(o.getContactForm(),r):-1!=e.indexOf("subscribe.html")?o.contentCallback(o.getSubscribForm(),r):util.getContents(r,o)},o.showImage=function(e){var t='<div id="overlay">\t<div class="layer">\t</div>\t<div id="overlay-close">X\t</div>\t<div id="overlay-contents-image">       <div class="overlay-contents-wrapper">\t\t\t<img src="'+e+'"/>       </div>\t </div></div>';(0,i.default)("body").append(t)},o.contentCallback=function(e,t){view.contentCallback(e,t)},o.hide=function(){(0,i.default)("#overlay").remove()},o.getFutureArticleMessage=function(){return"<p>Thank you for showing interest on this article.We are working hard to get this on board as quick as possible. Please visit us again or subscribe to get the update.</p>"},o.getContactForm=function(){return'<p>Please fill the form. We will touch base with you shortly through mail.</p><div id="contact-form"><div class="error" id="contact-error"></div>\t<form name="contact" id="overlayForm" action="/con_sub.php" method="post">\t\t<table>\t\t\t<tbody>\t\t\t\t<tr>\t\t\t\t\t<td colspan="2"><input name="name" type="text"\t\t\t\t\tplaceholder="Please enter your name" id="contact-name" /></td>\t\t\t\t</tr>\t\t\t\t<tr>\t\t\t\t\t<td colspan="2"><input name="email" type="email"\t\t\t\t\t\tplaceholder="Please enter valid email" id="contact-email"/></td>\t\t\t\t</tr>\t\t\t\t<tr>\t\t\t\t\t<td colspan="2"><input name="subject" type="text"\t\t\t\t\t\tplaceholder="Please type your subject" id="contact-subject"/></td>\t\t\t\t</tr>\t\t\t\t<tr>\t\t\t\t\t<td colspan="2"><textarea name="desc"\t\t\t\t\t\t\tplaceholder="Please write your description" id="contact-desc"></textarea></td>\t\t\t\t</tr>\t\t\t\t<tr>\t\t\t\t\t<td><input class="submitbutton barcolor" type="submit"\t\t\t\t\t\tvalue="Submit" placeholder="" /></td>\t\t\t\t\t<td><input class="resetbutton" type="reset" value="Clear"\t\t\t\t\t\tplaceholder="" /></td>\t\t\t\t</tr>\t\t\t</tbody>\t\t</table>\t</form></div>'},o.getSubscribForm=function(){return'<p>Please enter your email to subscribe. We will inform you whenever we updates in the blog </p><div id="contact-form"><div class="error" id="subscription-error"></div><form action="/subsribe.php" method="post" name="subscription" id="overlayForm">\t<table>\t\t<tbody>\t\t\t<tr>\t\t\t\t<td colspan="2"><input name="email" type="email"\t\t\t\t\tplaceholder="Please enter your email" id="subscription-email"/></td>\t\t\t</tr>\t\t\t<tr>\t\t\t\t<td><input class="submitbutton barcolor" type="submit"\tvalue="Subscribe" placeholder="" /></td>\t\t\t</tr>\t\t</tbody>\t</table></form></div>'},t.default=o},function(e,t){e.exports='<div id="header">\r\n    <header>\r\n\r\n        <div id="logo"></a></div>\r\n        \x3c!--<div id="tech-nav">\r\n            <div class="search">\r\n                <input type="text" id="sterm" name="sterm" placeholder="Search your topic here">\r\n                <a href="search"></a>\r\n            </div>\r\n            <div id="pagecounter"><span></span></div>\r\n            <ul>\r\n                <li><a href="/html/about.html">About</a></li>\r\n                <li><a href="/html/contact.html" class="overlay" id="contact" title="Contact Form">Contact</a></li>\r\n                <li><a href="/html/subscribe.html" class="overlay" id="subscribe" title="Subscribe Form">Subscribe</a></li>\r\n            </ul>\r\n        </div>--\x3e\r\n\r\n    </header>\r\n</div>\r\n<div id="nav">\r\n    <nav>\r\n        <ul id="menu">\r\n            <li id="java"><a href="/html/java/index.html">Java</a></li>\r\n            <li id="node"><a href="/html/node/grunt/index.html">Node.js</a></li>\r\n            <li id="lbnc"><a href="/html/loadbalancer/index.html">Load balance &amp; Cluster</a></li>\r\n        </ul>\r\n        <div id="nav-submenu">\r\n            <div id="sub-menu" class="nav-sub-left"></div>\r\n            <div id="item-menu" class="nav-sub-items"></div>\r\n            <div id="menu-data">\r\n                \x3c!--Java Menu Start--\x3e\r\n                <div id="java-menu">\r\n                    <div id="java-menu-left">\r\n                        <ul>\r\n                            <li id="jcore">Core</li>\r\n                            <li id="jrest">REST API</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div id="jcore-menu" class="defaultdata">\r\n                        <ul>\r\n                            <li><a href="/html/java/core/lambdaexp.html">Lambda Expression</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div id="jrest-menu">\r\n                        <ul>\r\n                            <li><a href="/html/java/tips/http_patch_verb.html">REST API with PATCH verb</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                \x3c!--Java Menu End--\x3e\r\n\r\n                \x3c!--Spring Menu Start\r\n                <div id="spring-menu">\r\n                  <div id="spring-menu-left" >\r\n                    <ul>\r\n                      <li id="item1">Item 21</li>\r\n                      <li>Item 22</li>\r\n                    </ul>\r\n                  </div>\r\n                  <div id="item1-menu" class="defaultdata">\r\n                    <ul>\r\n                      <li>Item 211</li>\r\n                      <li>item 212</li>\r\n                    </ul>\r\n                  </div>\r\n                  <div id="item2-menu">\r\n                    <ul>\r\n                      <li>Item 221</li>\r\n                      <li>item 222</li>\r\n                    </ul>\r\n                  </div>\r\n              </div>\r\n              \x3c!--Spring Menu End--\x3e\r\n\r\n                \x3c!--Node Menu Start--\x3e\r\n                <div id="node-menu">\r\n                    <div id="node-menu-left">\r\n                        <ul>\r\n                            <li id="tr">Task Runner</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div id="tr-menu" class="defaultdata">\r\n                        <ul>\r\n                            <li><a href="/html/node/grunt/grunt.html"><img href="/html/node/grunt/grunt.html"\r\n                                                                           src="/images/nav/grunt.png"/></a></li>\r\n\r\n                            <li><a href="/html/node/grunt/usecase1.html">Grunt Usecase</a></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                \x3c!--Node Menu End--\x3e\r\n\r\n                \x3c!--Load Balance n Cluster Menu Start--\x3e\r\n                <div id="lbnc-menu">\r\n                    <ul>\r\n                        <li><a href="/html/loadbalancer/loadbalancer.html">Load Balancer</a></li>\r\n                        <li><a href="/html/loadbalancer/mod_proxy.html">Apache mod_proxy</a></li>\r\n                        <li><a href="/html/loadbalancer/nginx.html">Nginx Load balancer</a></li>\r\n                    </ul>\r\n\r\n                </div>\r\n                \x3c!--Load Balance n Cluster Menu End--\x3e\r\n\r\n                \x3c!--wcs Menu Start--\x3e\r\n                <div id="wcs-menu">\r\n                    <div id="wcs-menu-left">\r\n                        <ul>\r\n                            <li id="privacy">Security</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div id="privacy-menu" class="defaultdata">\r\n                        <ul>\r\n                            <li>AC Policy</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                \x3c!--wcs Menu End--\x3e\r\n\r\n\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n\r\n    <div id="search-results" style="display:none">\r\n        <gcse:searchresults-only></gcse:searchresults-only>\r\n    </div>\r\n</div>\r\n<div id="footer">\r\n    <footer>\r\n        <div class="footer-section">\r\n            <h1 class="footer-title">Follow us </h1>\r\n            <div class="footer-contents">\r\n                <span id="facebook" class="social"></span>\r\n                <span id="twitter" class="social"></span>\r\n                <span id="youtube" class="social"></span>\r\n            </div>\r\n        </div>\r\n        \x3c!--<div class="footer-section">\r\n            <h1 class="footer-title"><a id="about" href="/html/about.html">About Us</a></h1>\r\n        </div>\r\n        <div class="footer-section">\r\n            <h1 class="footer-title"><a href="/html/contact.html" class="overlay" id="contact" title="Contact Form">Contact US</a>\r\n            </h1>\r\n        </div>\r\n        <div class="footer-section">\r\n            <h1 class="footer-title"><a href="/html/subscribe.html" class="overlay" id="subscribe"\r\n                                        title="Subscribe Form">Subscribe</a></h1>\r\n        </div>--\x3e\r\n    </footer>\r\n    \x3c!--<center>\r\n        Copyright &copy; 2014-15 Techjira.com, all rights reserved.\r\n    </center>--\x3e\r\n</div>\r\n\r\n<div id="common">\r\n    <div id="fb-root"></div>\r\n    <script>\r\n        prettyPrint();\r\n\r\n        /*Google search script start */\r\n        (function () {\r\n            var cx = \'010482420828273690228:sbnierfzojc\';\r\n            var gcse = document.createElement(\'script\');\r\n            gcse.type = \'text/javascript\';\r\n            gcse.async = true;\r\n            gcse.src = (document.location.protocol == \'https:\' ? \'https:\' : \'http:\') +\r\n                \'//cse.google.com/cse.js?cx=\' + cx;\r\n            var s = document.getElementsByTagName(\'script\')[0];\r\n            s.parentNode.insertBefore(gcse, s);\r\n        })();\r\n\r\n        /* google.setOnLoadCallback(function(){\r\n         var customSearchControl = new google.search.CustomSearchControl(\'010482420828273690228:sbnierfzojc\');\r\n         customSearchControl.setResultSetSize(google.search.Search.SMALL_RESULTSET);\r\n         customSearchControl.draw(\'results\');\r\n         }, true);*/\r\n\r\n        /*Google search script end */\r\n\r\n        /*Facebook script start*/\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) {\r\n                return;\r\n            }\r\n            js = d.createElement(s);\r\n            js.id = id;\r\n            js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v2.9";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, \'script\', \'facebook-jssdk\'));\r\n        /*Facebook script end*/\r\n    <\/script>\r\n</div>\r\n\r\n<div id="aside">\r\n    <div class="aside-section">\r\n        <div class="aside-title">\r\n            <h1>Tags</h1>\r\n        </div>\r\n        <div class="aside-contents list25px">\r\n            <a href="/html/node/grunt/index.html" class="tag">grunt</a>\r\n            <a href="/html/loadbalancer/index.html" class="tag">Load balancer</a>\r\n        </div>\r\n    </div>\r\n    <div class="aside-section">\r\n        <div class="aside-contents">\r\n            <div id="garesponsive">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \x3c!--<div class="aside-section">\r\n        <div class="aside-contents">\r\n                <div id="ffdeals"></div>\r\n        </div>\r\n      </div>\r\n     <div class="aside-section">\r\n        <div class="aside-contents">\r\n            <div id="fbdeals"></div>\r\n        </div>\r\n      </div>--\x3e\r\n\r\n    <div class="aside-section">\r\n        <div class="aside-contents">\r\n            <div id="ghad"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div id="comments">\r\n    <div class="gray-line"></div>\r\n    <div class="comment-block">\r\n        <div class="fb-comments" data-href="/" data-width="100%" data-order-by="reverse_time" data-numposts="5"></div>\r\n    </div>\r\n</div>\r\n'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o={};o.handleFooter=function(e){e.preventDefault();var t=(0,i.default)(e.target).attr("id");"facebook"==t&&window.open("https://www.facebook.com/techjira","_blank")},t.default=o},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=r(i),a=n(1),s=r(a),l={};l.handleHeader=function(e){e.preventDefault();var t=(0,o.default)(e.target);if("logo"==(0,o.default)(t).attr("id"))return void(window.location=window.location.origin);"search"==s.default.isAnchorEvent(t)?view.search():s.default.commonEvents(e)},t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),o=r(i),a=n(5),s=r(a),l={};l.handleOverlayEvents=function(e){var t=(0,o.default)(e.target);if("overlay-close"==t.attr("id")&&s.default.hide(),"submit"==t.attr("type")){e.preventDefault();var n=(0,o.default)("#overlayForm");if("post"==n.attr("method")){var r=n.attr("action"),i=validation.SUBSCRIBEFORM;"contact"==n.attr("name")&&(i=validation.CONTACTFORM),validation.validateForm(i,n)||o.default.post(r,(0,o.default)("form#"+n.attr("id")).serialize(),function(e){(0,o.default)(".overlay-contents-wrapper").html(e)})}}},t.default=l},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=n(0),o=r(i),a=n(2),s=r(a),l=n(1),u=r(l),c=n(6),d=r(c);(0,o.default)(document).ready(function(){s.default.loadCSS("/css/style.css"),s.default.loadContents(d.default,!0),u.default.registerEvents(),window.onpopstate=function(e){e.state&&(page={path:window.location.href,place:"inside",tag:"section"},s.default.addContents(page,e.state))},window.history.pushState((0,o.default)("section").html(),"",document.location.pathname)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(r),o={};o.showAds=function(){},o.showGoogleBanner=function(){(0,i.default)("section").prepend('<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"><\/script>\x3c!-- HBanner --\x3e<ins class="adsbygoogle"style="display:inline-block;width:100%;height:90px"data-ad-client="ca-pub-4754122423617972" data-ad-slot="9263876043"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});<\/script>'),(0,i.default)("#googlebanner").html('<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"><\/script><ins class="adsbygoogle"style="display:block"data-ad-client="ca-pub-4754122423617972"data-ad-slot="1677647649"data-ad-format="auto"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});<\/script>')},o.showResponsiveAd=function(){(0,i.default)("#garesponsive").html('<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"><\/script><ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4754122423617972" data-ad-slot="1677647649"data-ad-format="auto"></ins><script> (adsbygoogle = window.adsbygoogle || []).push({});<\/script> ')},o.showGoogleHoAd=function(){(0,i.default)("#ghad").html('<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"><\/script><ins class="adsbygoogle"  style="display:inline-block;width:300px;height:600px"   data-ad-client="ca-pub-4754122423617972"    data-ad-slot="3747869644"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});<\/script>')},o.showFlipkartBanner=function(){(0,i.default)("#flipkartbanner").prepend("<iframe src='http://www.flipkart.com/affiliate/displayWidget?affrid=WRID-143212467891393535' frameborder=0 height=90 width=728></iframe>")},o.showFlipkartFeatureDeals=function(){(0,i.default)("#ffdeals").html("<iframe src='http://www.flipkart.com/affiliate/displayWidget?affrid=WRID-143280153627459482' frameborder=0 height=250 ></iframe>")},o.showFlipkartBestDeals=function(){(0,i.default)("#fbdeals").html("<iframe src='http://www.flipkart.com/affiliate/displayWidget?affrid=WRID-143316168217862985' frameborder=0 height=250 width=100%></iframe>")},t.default=o},function(e,t,n){"use strict";var r,i;window.PR_SHOULD_USE_CONTINUATION=!0;var o;!function(){function n(e){function t(e){var t=e.charCodeAt(0);if(92!==t)return t;var n=e.charAt(1);return(t=c[n])||("0"<=n&&n<="7"?parseInt(e.substring(1),8):"u"===n||"x"===n?parseInt(e.substring(2),16):e.charCodeAt(1))}function n(e){if(e<32)return(e<16?"\\x0":"\\x")+e.toString(16);var t=String.fromCharCode(e);return"\\"===t||"-"===t||"]"===t||"^"===t?"\\"+t:t}function r(e){var r=e.substring(1,e.length-1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g")),i=[],o="^"===r[0],a=["["];o&&a.push("^");for(var s=o?1:0,l=r.length;s<l;++s){var u=r[s];if(/\\[bdsw]/i.test(u))a.push(u);else{var c,d=t(u);s+2<l&&"-"===r[s+1]?(c=t(r[s+2]),s+=2):c=d,i.push([d,c]),c<65||d>122||(c<65||d>90||i.push([32|Math.max(65,d),32|Math.min(c,90)]),c<97||d>122||i.push([-33&Math.max(97,d),-33&Math.min(c,122)]))}}i.sort(function(e,t){return e[0]-t[0]||t[1]-e[1]});for(var f=[],p=[],s=0;s<i.length;++s){var h=i[s];h[0]<=p[1]+1?p[1]=Math.max(p[1],h[1]):f.push(p=h)}for(var s=0;s<f.length;++s){var h=f[s];a.push(n(h[0])),h[1]>h[0]&&(h[1]+1>h[0]&&a.push("-"),a.push(n(h[1])))}return a.push("]"),a.join("")}for(var i=0,o=!1,a=!1,s=0,l=e.length;s<l;++s){var u=e[s];if(u.ignoreCase)a=!0;else if(/[a-z]/i.test(u.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){o=!0,a=!1;break}}for(var c={b:8,t:9,n:10,v:11,f:12,r:13},d=[],s=0,l=e.length;s<l;++s){var u=e[s];if(u.global||u.multiline)throw new Error(""+u);d.push("(?:"+function(e){for(var t=e.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g")),a=t.length,s=[],l=0,u=0;l<a;++l){var c=t[l];if("("===c)++u;else if("\\"===c.charAt(0)){var d=+c.substring(1);d&&(d<=u?s[d]=-1:t[l]=n(d))}}for(var l=1;l<s.length;++l)-1===s[l]&&(s[l]=++i);for(var l=0,u=0;l<a;++l){var c=t[l];if("("===c)++u,s[u]||(t[l]="(?:");else if("\\"===c.charAt(0)){var d=+c.substring(1);d&&d<=u&&(t[l]="\\"+s[d])}}for(var l=0;l<a;++l)"^"===t[l]&&"^"!==t[l+1]&&(t[l]="");if(e.ignoreCase&&o)for(var l=0;l<a;++l){var c=t[l],f=c.charAt(0);c.length>=2&&"["===f?t[l]=r(c):"\\"!==f&&(t[l]=c.replace(/[a-zA-Z]/g,function(e){var t=e.charCodeAt(0);return"["+String.fromCharCode(-33&t,32|t)+"]"}))}return t.join("")}(u)+")")}return new RegExp(d.join("|"),a?"gi":"g")}function a(e,t){function n(e){var l=e.nodeType;if(1==l){if(r.test(e.className))return;for(var u=e.firstChild;u;u=u.nextSibling)n(u);var c=e.nodeName.toLowerCase();"br"!==c&&"li"!==c||(i[s]="\n",a[s<<1]=o++,a[s++<<1|1]=e)}else if(3==l||4==l){var d=e.nodeValue;d.length&&(d=t?d.replace(/\r\n?/g,"\n"):d.replace(/[ \t\r\n]+/g," "),i[s]=d,a[s<<1]=o,o+=d.length,a[s++<<1|1]=e)}}var r=/(?:^|\s)nocode(?:\s|$)/,i=[],o=0,a=[],s=0;return n(e),{sourceCode:i.join("").replace(/\n$/,""),spans:a}}function s(e,t,n,r){if(t){var i={sourceCode:t,basePos:e};n(i),r.push.apply(r,i.decorations)}}function l(e){for(var t=void 0,n=e.firstChild;n;n=n.nextSibling){var r=n.nodeType;t=1===r?t?e:n:3===r&&$.test(n.nodeValue)?e:t}return t===e?void 0:t}function u(e,t){var r,i={};!function(){for(var o=e.concat(t),a=[],s={},l=0,u=o.length;l<u;++l){var c=o[l],d=c[3];if(d)for(var f=d.length;--f>=0;)i[d.charAt(f)]=c;var p=c[1],h=""+p;s.hasOwnProperty(h)||(a.push(p),s[h]=null)}a.push(/[\0-\uffff]/),r=n(a)}();var o=t.length;return function e(n){for(var a=n.sourceCode,l=n.basePos,u=[l,q],c=0,d=a.match(r)||[],f={},p=0,m=d.length;p<m;++p){var v,g=d[p],y=f[g],b=void 0;if("string"==typeof y)v=!1;else{var x=i[g.charAt(0)];if(x)b=g.match(x[1]),y=x[0];else{for(var w=0;w<o;++w)if(x=t[w],b=g.match(x[1])){y=x[0];break}b||(y=q)}v=y.length>=5&&"lang-"===y.substring(0,5),!v||b&&"string"==typeof b[1]||(v=!1,y=I),v||(f[g]=y)}var C=c;if(c+=g.length,v){var T=b[1],S=g.indexOf(T),k=S+T.length;b[2]&&(k=g.length-b[2].length,S=k-T.length);var E=y.substring(5);s(l+C,g.substring(0,S),e,u),s(l+C+S,T,h(E,T),u),s(l+C+k,g.substring(k),e,u)}else u.push(l+C,y)}n.decorations=u}}function c(e){var t=[],n=[];e.tripleQuotedStrings?t.push([M,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""]):e.multiLineStrings?t.push([M,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):t.push([M,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]),e.verbatimStrings&&n.push([M,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var r=e.hashComments;r&&(e.cStyleComments?(r>1?t.push([_,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):t.push([_,/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"]),n.push([M,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,null])):t.push([_,/^#[^\r\n]*/,null,"#"])),e.cStyleComments&&(n.push([_,/^\/\/[^\r\n]*/,null]),n.push([_,/^\/\*[\s\S]*?(?:\*\/|$)/,null]));var i=e.regexLiterals;if(i){var o=i>1?"":"\n\r",a=o?".":"[\\S\\s]",s="/(?=[^/*"+o+"])(?:[^/\\x5B\\x5C"+o+"]|\\x5C"+a+"|\\x5B(?:[^\\x5C\\x5D"+o+"]|\\x5C"+a+")*(?:\\x5D|$))+/";n.push(["lang-regex",RegExp("^"+B+"("+s+")")])}var l=e.types;l&&n.push([F,l]);var c=(""+e.keywords).replace(/^ | $/g,"");c.length&&n.push([P,new RegExp("^(?:"+c.replace(/[\s,]+/g,"|")+")\\b"),null]),t.push([q,/^\s+/,null," \r\n\t "]);var d="^.[^\\s\\w.$@'\"`/\\\\]*";return e.regexLiterals&&(d+="(?!s*/)"),n.push([H,/^@[a-z_$][a-z_$@0-9]*/i,null],[F,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[q,/^[a-z_$][a-z_$@0-9]*/i,null],[H,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[q,/^\\[\s\S]?/,null],[R,new RegExp(d),null]),u(t,n)}function d(e,t,n){function r(e){var t=e.nodeType;if(1!=t||o.test(e.className)){if((3==t||4==t)&&n){var l=e.nodeValue,u=l.match(a);if(u){var c=l.substring(0,u.index);e.nodeValue=c;var d=l.substring(u.index+u[0].length);if(d){var f=e.parentNode;f.insertBefore(s.createTextNode(d),e.nextSibling)}i(e),c||e.parentNode.removeChild(e)}}}else if("br"===e.nodeName)i(e),e.parentNode&&e.parentNode.removeChild(e);else for(var p=e.firstChild;p;p=p.nextSibling)r(p)}function i(e){function t(e,n){var r=n?e.cloneNode(!1):e,i=e.parentNode;if(i){var o=t(i,1),a=e.nextSibling;o.appendChild(r);for(var s=a;s;s=a)a=s.nextSibling,o.appendChild(s)}return r}for(;!e.nextSibling;)if(!(e=e.parentNode))return;for(var n,r=t(e.nextSibling,0);(n=r.parentNode)&&1===n.nodeType;)r=n;u.push(r)}for(var o=/(?:^|\s)nocode(?:\s|$)/,a=/\r\n?|\n/,s=e.ownerDocument,l=s.createElement("li");e.firstChild;)l.appendChild(e.firstChild);for(var u=[l],c=0;c<u.length;++c)r(u[c]);t===(0|t)&&u[0].setAttribute("value",t);var d=s.createElement("ol");d.className="linenums";for(var f=Math.max(0,t-1|0)||0,c=0,p=u.length;c<p;++c)l=u[c],l.className="L"+(c+f)%10,l.firstChild||l.appendChild(s.createTextNode(" ")),d.appendChild(l);e.appendChild(d)}function f(e){var t=/\bMSIE\s(\d+)/.exec(navigator.userAgent);t=t&&+t[1]<=8;var n=/\n/g,r=e.sourceCode,i=r.length,o=0,a=e.spans,s=a.length,l=0,u=e.decorations,c=u.length,d=0;u[c]=i;var f,p;for(p=f=0;p<c;)u[p]!==u[p+2]?(u[f++]=u[p++],u[f++]=u[p++]):p+=2;for(c=f,p=f=0;p<c;){for(var h=u[p],m=u[p+1],v=p+2;v+2<=c&&u[v+1]===m;)v+=2;u[f++]=h,u[f++]=m,p=v}c=u.length=f;var g,y=e.sourceNode;y&&(g=y.style.display,y.style.display="none");try{for(;l<s;){var b,x=(a[l],a[l+2]||i),w=u[d+2]||i,v=Math.min(x,w),C=a[l+1];if(1!==C.nodeType&&(b=r.substring(o,v))){t&&(b=b.replace(n,"\r")),C.nodeValue=b;var T=C.ownerDocument,S=T.createElement("span");S.className=u[d+1];var k=C.parentNode;k.replaceChild(S,C),S.appendChild(C),o<x&&(a[l+1]=C=T.createTextNode(r.substring(v,x)),k.insertBefore(C,S.nextSibling))}o=v,o>=x&&(l+=2),o>=w&&(d+=2)}}finally{y&&(y.style.display=g)}}function p(e,t){for(var n=t.length;--n>=0;){var r=t[n];z.hasOwnProperty(r)?y.console&&console.warn("cannot override language handler %s",r):z[r]=e}}function h(e,t){return e&&z.hasOwnProperty(e)||(e=/^\s*</.test(t)?"default-markup":"default-code"),z[e]}function m(e){var t=e.langExtension;try{var n=a(e.sourceNode,e.pre),r=n.sourceCode;e.sourceCode=r,e.spans=n.spans,e.basePos=0,h(t,r)(e),f(e)}catch(e){y.console&&console.log(e&&e.stack||e)}}function v(e,t,n){var r=document.createElement("div");return r.innerHTML="<pre>"+e+"</pre>",r=r.firstChild,n&&d(r,n,!0),m({langExtension:t,numberLines:n,sourceNode:r,pre:1}),r.innerHTML}function g(e,t){function n(e){return i.getElementsByTagName(e)}function r(){for(var t=y.PR_SHOULD_USE_CONTINUATION?p.now()+250:1/0;v<s.length&&p.now()<t;v++){for(var n=s[v],i=S,a=n;a=a.previousSibling;){var u=a.nodeType,c=(7===u||8===u)&&a.nodeValue;if(c?!/^\??prettify\b/.test(c):3!==u||/\S/.test(a.nodeValue))break;if(c){i={},c.replace(/\b(\w+)=([\w:.%+-]+)/g,function(e,t,n){i[t]=n});break}}var f=n.className;if((i!==S||b.test(f))&&!x.test(f)){for(var k=!1,E=n.parentNode;E;E=E.parentNode){var N=E.tagName;if(T.test(N)&&E.className&&b.test(E.className)){k=!0;break}}if(!k){n.className+=" prettyprinted";var A=i.lang;if(!A){A=f.match(g);var j;!A&&(j=l(n))&&C.test(j.tagName)&&(A=j.className.match(g)),A&&(A=A[1])}var D;if(w.test(n.tagName))D=1;else{var L=n.currentStyle,O=o.defaultView,M=L?L.whiteSpace:O&&O.getComputedStyle?O.getComputedStyle(n,null).getPropertyValue("white-space"):0;D=M&&"pre"===M.substring(0,3)}var P=i.linenums;(P="true"===P||+P)||(P=f.match(/\blinenums\b(?::(\d+))?/),P=!!P&&(!P[1]||!P[1].length||+P[1])),P&&d(n,P,D),h={langExtension:A,sourceNode:n,numberLines:P,pre:D},m(h)}}}v<s.length?setTimeout(r,250):"function"==typeof e&&e()}for(var i=t||document.body,o=i.ownerDocument||document,a=[n("pre"),n("code"),n("xmp")],s=[],u=0;u<a.length;++u)for(var c=0,f=a[u].length;c<f;++c)s.push(a[u][c]);a=null;var p=Date;p.now||(p={now:function(){return+new Date}});var h,v=0,g=/\blang(?:uage)?-([\w.]+)(?!\S)/,b=/\bprettyprint\b/,x=/\bprettyprinted\b/,w=/pre|xmp/i,C=/^code$/i,T=/^(?:pre|code|xmp)$/i,S={};r()}var y=window,b=["break,continue,do,else,for,if,return,while"],x=[b,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],w=[x,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],C=[w,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],T=[w,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],S=[T,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],k=[w,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],E="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",N=[b,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],A=[b,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],j=[b,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],D=[b,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],L=[C,S,k,E,N,A,D],O=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,M="str",P="kwd",_="com",F="typ",H="lit",R="pun",q="pln",I="src",B="(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*",$=/\S/,W=c({keywords:L,hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),z={};p(W,["default-code"]),p(u([],[[q,/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],[_,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[R,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]),p(u([[q,/^[\s]+/,null," \t\r\n"],["atv",/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[R,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]),p(u([],[["atv",/^[\s\S]+/]]),["uq.val"]),p(c({keywords:C,hashComments:!0,cStyleComments:!0,types:O}),["c","cc","cpp","cxx","cyc","m"]),p(c({keywords:"null,true,false"}),["json"]),p(c({keywords:S,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:O}),["cs"]),p(c({keywords:T,cStyleComments:!0}),["java"]),p(c({keywords:D,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]),p(c({keywords:N,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]),p(c({keywords:E,hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]),p(c({keywords:A,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]),p(c({keywords:k,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]),p(c({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]),p(c({keywords:j,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]),p(u([],[[M,/^[\s\S]+/]]),["regex"]);var U=y.PR={createSimpleLexer:u,registerLangHandler:p,sourceDecorator:c,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:_,PR_DECLARATION:"dec",PR_KEYWORD:P,PR_LITERAL:H,PR_NOCODE:"nocode",PR_PLAIN:q,PR_PUNCTUATION:R,PR_SOURCE:I,PR_STRING:M,PR_TAG:"tag",PR_TYPE:F,prettyPrintOne:y.prettyPrintOne=v,prettyPrint:o=y.prettyPrint=g};r=[],void 0!==(i=function(){return U}.apply(t,r))&&(e.exports=i)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,